"""Задача №3.
Когда пользователь заходит на страницу урока, мы сохраняем время его захода. Когда пользователь выходит с урока (или закрывает вкладку, браузер – в общем как-то разрывает соединение с сервером), мы фиксируем время выхода с урока. Время присутствия каждого пользователя на уроке хранится у нас в виде интервалов. В функцию передается словарь, содержащий три списка с таймстемпами (время в секундах):

lesson – начало и конец урока
pupil – интервалы присутствия ученика
tutor – интервалы присутствия учителя
Интервалы устроены следующим образом – это всегда список из четного количества элементов. Под четными индексами (начиная с 0) время входа на урок, под нечетными - время выхода с урока.
Нужно написать функцию, которая получает на вход словарь с интервалами и возвращает время общего присутствия ученика и учителя на уроке (в секундах).
"""


def calculate_range(current_intervals: list) -> set:
    """Генерируем множество, состоящее из секунд в заданных интервалах. 
    Проходимся по каждому интервалу и обновляем множество.

    Args:
        current_intervals (list): набор интервалов

    Returns:
        set: множество, состоящее из секунд в заданных интервалах
    """
    total_range = set()
    for index in range(int(len(current_intervals) / 2)):
        start, end = current_intervals[index * 2], current_intervals[index * 2 + 1]
        total_range.update(set(range(start, end)))
    return total_range
    
 
def appearance(intervals: dict) -> int:
    """Получаем множества из наборов секунд в заданных интервалах. Объединяем множества и выводим длину результирующего.

    Args:
        intervals (dict): словарь, состоящий из интервалов ученика, учителя и урока

    Returns:
        int: время общего присутствия
    """
    lesson_set = calculate_range(intervals['lesson'])
    pupil_set = calculate_range(intervals['pupil'])
    tutor_set = calculate_range(intervals['tutor'])

    total_time = set.intersection(lesson_set, pupil_set, tutor_set)
    return len(total_time)


if __name__ == '__main__':
    tests = [
        {'data': {'lesson': [1594663200, 1594666800],
                'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
                'tutor': [1594663290, 1594663430, 1594663443, 1594666473]},
        'answer': 3117
        },
        {'data': {'lesson': [1594702800, 1594706400],
                'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 1594704564, 1594705150, 1594704581, 1594704582, 1594704734, 1594705009, 1594705095, 1594705096, 1594705106, 1594706480, 1594705158, 1594705773, 1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503, 1594706524, 1594706524, 1594706579, 1594706641],
                # 'pupil': [1594702789, 1594704542, 1594704564,s 1594706480],
                'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]}, 
        'answer': 3577
        },
        {'data': {'lesson': [1594692000, 1594695600],
                'pupil': [1594692033, 1594696347],
                'tutor': [1594692017, 1594692066, 1594692068, 1594696341]},
        'answer': 3565
        },
    ]
    
    for i, test in enumerate(tests):
       test_answer = appearance(test['data'])
       print(test_answer)
       assert test_answer == test['answer'], f'Error on test case {i + 1}, got {test_answer}, expected {test["answer"]}'
